'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
const react_native_1 = require("react-native");
const tracking = require('promise/setimmediate/rejection-tracking');
const reactNativeVersion = require('react-native/Libraries/Core/ReactNativeVersion.js');
const stackLimit = 200;
const handleError = (error) => {
    if (__DEV__) {
        console.log('[Embrace] app is in development mode. Not handling error.');
        return;
    }
    if (!(error instanceof Error)) {
        console.warn('[Embrace] error must be of type Error');
        return;
    }
    const { name, message, stack = '' } = error;
    const truncated = stack.split('\n').slice(0, stackLimit).join('\n');
    react_native_1.NativeModules.EmbraceManager.logUnhandledJSException(name, message, error.constructor.name, truncated);
};
exports.initialize = ({ patch } = {}) => {
    if (!ErrorUtils) {
        console.warn('[Embrace] ErrorUtils is not defined. Not setting exception handler.');
        return;
    }
    if (patch) {
        exports.setJavaScriptPatch(patch);
    }
    if (isObjectNonEmpty(reactNativeVersion) &&
        isObjectNonEmpty(reactNativeVersion.version)) {
        react_native_1.NativeModules.EmbraceManager.setReactNativeVersion(buildVersionStr(reactNativeVersion.version));
    }
    // Only attempt to check for CodePush bundle URL in release mode. Otherwise CodePush will throw an exception.
    // https://docs.microsoft.com/en-us/appcenter/distribution/codepush/react-native#plugin-configuration-ios
    if (!__DEV__) {
        react_native_1.NativeModules.EmbraceManager.checkAndSetCodePushBundleURL();
    }
    const previousHandler = ErrorUtils.getGlobalHandler();
    ErrorUtils.setGlobalHandler((error, isFatal) => {
        handleError(error);
        // Wait before terminating app. This gives the native side time to wrap up so we can send the JS crash report.
        setTimeout(() => {
            previousHandler(error, isFatal);
        }, 150);
    });
    tracking.enable({
        allRejections: true,
        onUnhandled: (_, error) => {
            let message = `Unhandled promise rejection: ${error}`;
            let st = '';
            if (error instanceof Error) {
                message = error.message;
                st = error.stack || '';
            }
            react_native_1.NativeModules.EmbraceManager.logMessageWithSeverityAndProperties(message, exports.ERROR, {}, false, st);
        },
        onHandled: () => { },
    });
};
const isObjectNonEmpty = (obj) => Object.keys(obj || {}).length > 0;
const buildVersionStr = ({ major, minor, patch, prerelease, }) => {
    const versionStr = `${major || '0'}.${minor || '0'}.${patch || '0'}`;
    return prerelease ? `${versionStr}.${prerelease}` : versionStr;
};
exports.endAppStartup = (properties) => {
    if (properties && Object.keys(properties).length > 0) {
        react_native_1.NativeModules.EmbraceManager.endAppStartupWithProperties(properties);
        return;
    }
    react_native_1.NativeModules.EmbraceManager.endAppStartup();
};
exports.setUserIdentifier = (userIdentifier) => react_native_1.NativeModules.EmbraceManager.setUserIdentifier(userIdentifier);
exports.clearUserIdentifier = () => react_native_1.NativeModules.EmbraceManager.clearUserIdentifier();
exports.setUsername = (username) => react_native_1.NativeModules.EmbraceManager.setUsername(username);
exports.clearUsername = () => react_native_1.NativeModules.EmbraceManager.clearUsername();
exports.setUserEmail = (userEmail) => react_native_1.NativeModules.EmbraceManager.setUserEmail(userEmail);
exports.clearUserEmail = () => react_native_1.NativeModules.EmbraceManager.clearUserEmail();
exports.logBreadcrumb = (message) => react_native_1.NativeModules.EmbraceManager.logBreadcrumb(message);
exports.logScreen = (screenName) => react_native_1.NativeModules.EmbraceManager.logBreadcrumb(`Opening screen [${screenName}]`);
exports.startMoment = (name, identifier, properties) => {
    if (identifier && properties) {
        react_native_1.NativeModules.EmbraceManager.startMomentWithNameAndIdentifierAndProperties(name, identifier, properties);
    }
    else if (identifier) {
        react_native_1.NativeModules.EmbraceManager.startMomentWithNameAndIdentifier(name, identifier);
    }
    else {
        react_native_1.NativeModules.EmbraceManager.startMomentWithName(name);
    }
};
exports.startMomentAllowingScreenshot = (name, allowScreenshot, identifier, properties) => {
    if (identifier && properties) {
        react_native_1.NativeModules.EmbraceManager.startMomentWithNameAndIdentifierAndPropertiesAllowingScreenshot(name, identifier, properties, allowScreenshot);
    }
    else if (identifier) {
        react_native_1.NativeModules.EmbraceManager.startMomentWithNameAndIdentifierAllowingScreenshot(name, identifier, allowScreenshot);
    }
    else {
        react_native_1.NativeModules.EmbraceManager.startMomentWithNameAllowingScreenshot(name, allowScreenshot);
    }
};
exports.endMoment = (name, identifier, properties) => {
    if (identifier) {
        react_native_1.NativeModules.EmbraceManager.endMomentWithNameAndIdentifier(name, identifier, properties);
    }
    else {
        react_native_1.NativeModules.EmbraceManager.endMomentWithName(name, properties);
    }
};
exports.setUserPersona = (persona) => react_native_1.NativeModules.EmbraceManager.setUserPersona(persona);
exports.clearUserPersona = (persona) => react_native_1.NativeModules.EmbraceManager.clearUserPersona(persona);
exports.clearAllUserPersonas = () => react_native_1.NativeModules.EmbraceManager.clearAllUserPersonas();
exports.WARNING = 'warning';
exports.INFO = 'info';
exports.ERROR = 'error';
exports.logMessage = (message, severity = 'error', properties, allowScreenshot = false) => {
    const stacktrace = severity === exports.INFO ? '' : exports.generateStackTrace();
    react_native_1.NativeModules.EmbraceManager.logMessageWithSeverityAndProperties(message, severity, properties, allowScreenshot, stacktrace);
};
exports.logHandledError = (error) => {
    if (error instanceof Error) {
        react_native_1.NativeModules.EmbraceManager.logHandledError(error.message, error.stack);
    }
};
exports.startView = (view) => react_native_1.NativeModules.EmbraceManager.startView(view);
exports.endView = (view) => react_native_1.NativeModules.EmbraceManager.endView(view);
exports.generateStackTrace = () => {
    const err = new Error();
    return err.stack || '';
};
exports.setJavaScriptPatch = (patch) => {
    react_native_1.NativeModules.EmbraceManager.setJavaScriptPatchNumber(patch);
};
exports.setJavaScriptBundlePath = (path) => {
    react_native_1.NativeModules.EmbraceManager.setJavaScriptBundlePath(path);
};
exports.addSessionProperty = (key, value, permanent) => {
    return react_native_1.NativeModules.EmbraceManager.addSessionProperty(key, value, permanent);
};
exports.removeSessionProperty = (key) => {
    react_native_1.NativeModules.EmbraceManager.removeSessionProperty(key);
};
exports.getSessionProperties = () => {
    return react_native_1.NativeModules.EmbraceManager.getSessionProperties();
};
exports.endSession = (clearUserInfo = false) => {
    return react_native_1.NativeModules.EmbraceManager.endSession(clearUserInfo);
};
exports.setUserAsPayer = () => react_native_1.NativeModules.EmbraceManager.setUserAsPayer();
exports.clearUserAsPayer = () => react_native_1.NativeModules.EmbraceManager.clearUserAsPayer();
