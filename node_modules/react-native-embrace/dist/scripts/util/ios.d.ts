import { FileUpdatable, Patchable } from './file';
export declare const embraceNativePod = "\n  pod 'EmbraceIO'\n";
export declare const embraceImport = "\n#import <Embrace/Embrace.h>\n";
export declare const bundlePhaseRE: RegExp;
export declare const bundlePhaseExtraArgs = "export EXTRA_PACKAGER_ARGS=\"--sourcemap-output $CONFIGURATION_BUILD_DIR/$UNLOCALIZED_RESOURCES_FOLDER_PATH/main.jsbundle.map\"";
export declare const embRunScript = "\"${PODS_ROOT}/EmbraceIO/run.sh\"";
export declare const appDelegatePatchable: ({ name }: {
    name: string;
}) => Promise<FileUpdatable>;
export declare const podfilePatchable: () => Promise<FileUpdatable>;
export declare const embracePlistPatchable: ({ name }: {
    name: string;
}) => Promise<FileUpdatable>;
export declare const xcodePatchable: ({ name }: {
    name: string;
}) => Promise<XcodeProject>;
declare class XcodeProject implements Patchable {
    project: any;
    path: string;
    constructor(path: string | undefined, project: any);
    buildPhaseObj(): {
        [key: string]: any;
    };
    hasLine(key: string, line: string | RegExp): boolean;
    modifyPhase(key: string, line: string | RegExp, add: string): void;
    findPhase(line: string | RegExp): string;
    findAndRemovePhase(line: string | RegExp): void;
    sync(): void;
    patch(): void;
    addFile(groupName: string, path: string): void;
    private findHash;
}
export declare const formatEmbraceInitializer: (appID: string) => string;
export {};
