"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
exports.patchFiles = (...files) => {
    return chainPromises(...files).then((patchables) => {
        patchables.map((p) => p.patch());
    });
};
const chainPromises = (...promises) => promises.reduce((prev, cur) => prev.then((prevRes) => cur().then((curRes) => [...prevRes, curRes])), Promise.resolve([]));
exports.NoopFile = {
    path: '',
    contents: '',
    patch: () => { },
    hasLine: (_) => false,
    addBefore: (line, add) => { },
    addAfter: (line, add) => { },
    deleteLine: (line) => { },
};
class FileContents {
    constructor(path = '') {
        this.path = path;
        this.contents = fs.readFileSync(path, 'utf8');
    }
    hasLine(line) {
        return (line instanceof RegExp ? this.contents.search(line) : this.contents.indexOf(line)) > -1;
    }
    addBefore(line, add) {
        if (this.hasLine(line)) {
            this.contents = this.contents.replace(line, `${add}${line}`);
        }
    }
    addAfter(line, add) {
        if (this.hasLine(line)) {
            let replaceWith = line;
            let space = '';
            if (line instanceof RegExp) {
                const matches = this.contents.match(line) || [];
                if (matches.length === 0) {
                    return;
                }
                // If regex starts with space matcher, use space.
                if (line.toString().match(/^\/\(\\s\+\)/)) {
                    space = matches[1];
                }
                replaceWith = matches[0];
            }
            this.contents = this.contents.replace(line, `${replaceWith}${space}${add}`);
        }
    }
    deleteLine(line) {
        if (this.hasLine(line)) {
            this.contents = this.contents.replace(line, '');
        }
    }
    patch() {
        fs.writeFileSync(this.path, this.contents);
    }
}
exports.getFileContents = (path) => {
    return new FileContents(path);
};
