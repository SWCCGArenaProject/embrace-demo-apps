"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
const path = require('path');
const file_1 = require("./file");
exports.buildGradlePatchable = () => {
    return new Promise((resolve, reject) => {
        const gradlePath = path.join('android', 'build.gradle');
        if (!fs.existsSync(gradlePath)) {
            return reject(`cannot find build.gradle file at ${gradlePath}`);
        }
        return resolve(file_1.getFileContents(gradlePath));
    });
};
exports.buildAppGradlePatchable = () => {
    return new Promise((resolve, reject) => {
        const appGradlePath = path.join('android', 'app', 'build.gradle');
        if (!fs.existsSync(appGradlePath)) {
            return reject(`cannot find build.gradle file at ${appGradlePath}`);
        }
        return resolve(file_1.getFileContents(appGradlePath));
    });
};
exports.embraceJSON = () => {
    return new Promise((resolve, reject) => {
        const p = path.join('android', 'app', 'src', 'main', 'embrace-config.json');
        if (!fs.existsSync(p)) {
            return reject(`cannot find embrace-config.json file at ${p}`);
        }
        return resolve(file_1.getFileContents(p));
    });
};
exports.mainApplicationPatchable = ({ name = '' }) => {
    return new Promise((resolve, reject) => {
        const p = path.join('android', 'app', 'src', 'main', 'java', 'com', name.toLowerCase(), 'MainApplication.java');
        if (!fs.existsSync(p)) {
            return reject(`cannot find MainApplication.java file at ${p}`);
        }
        return resolve(file_1.getFileContents(p));
    });
};
exports.embraceJSONContents = (params) => {
    return (`{
    "app_id": "${params.appID}",
    "api_token": "${params.apiToken}"
}`);
};
