"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const semverGte = require('semver/functions/gte');
const fs = require('fs');
const path = require('path');
const logger_1 = require("../../src/logger");
const ios_1 = require("../util/ios");
const common_1 = require("./common");
const logger = new logger_1.default(console);
exports.iosImportEmbrace = {
    name: 'iOS import Embrace',
    run: (wizard) => wizard.fieldValue(common_1.packageJSON).
        then((json) => ios_1.appDelegatePatchable(json)).
        then((appDelegate) => {
        logger.log('patching AppDelegate with Embrace import');
        if (appDelegate.hasLine(ios_1.embraceImport)) {
            logger.warn('already imported Embrace');
            return false;
        }
        appDelegate.addAfter('#import <React/RCTRootView.h>', ios_1.embraceImport);
        appDelegate.patch();
        return true;
    }),
};
exports.iosInitializeEmbrace = {
    name: 'iOS initialize Embrace',
    run: (wizard) => wizard.fieldValue(common_1.packageJSON).
        then((json) => ios_1.appDelegatePatchable(json)).
        then((appDelegate) => {
        logger.log('patching AppDelegate with Embrace initialize');
        if (appDelegate.hasLine('[[Embrace sharedInstance] start')) {
            logger.warn('already initializing Embrace');
            return false;
        }
        return wizard.fieldValue(common_1.iosAppID).then((val) => {
            const embraceInitializer = ios_1.formatEmbraceInitializer(val);
            appDelegate.addBefore('RCTBridge *bridge = [[RCTBridge alloc]', embraceInitializer);
            appDelegate.patch();
            return true;
        });
    }),
};
exports.iosPodfile = {
    name: 'Podfile patch',
    run: (wizard) => wizard.fieldValue(common_1.packageJSON).
        then((json) => {
        const rnVersion = (json.dependencies || {})['react-native'];
        // If 6.0.0, autolink should have linked the Pod.
        if (semverGte('6.0.0', rnVersion)) {
            logger.log('skipping patching Podfile since react-native is on an autolink supported version');
            return;
        }
        return ios_1.podfilePatchable().then((podfile) => {
            if (podfile.hasLine(ios_1.embraceNativePod)) {
                logger.warn('Already has EmbraceIO pod');
                return;
            }
            podfile.addAfter(embraceRNPod, ios_1.embraceNativePod);
            return podfile.patch();
        });
    })
};
exports.patchXcodeBundlePhase = {
    name: 'Update bundle phase',
    run: (wizard) => wizard.fieldValue(common_1.packageJSON).
        then((json) => ios_1.xcodePatchable(json)).
        then((project) => {
        const bundlePhaseKey = project.findPhase(ios_1.bundlePhaseRE);
        if (!bundlePhaseKey) {
            logger.error('Could not find Xcode React Native bundle phase');
            return;
        }
        if (project.hasLine(bundlePhaseKey, ios_1.bundlePhaseExtraArgs)) {
            logger.warn('Already patched Xcode React Native bundle phase');
            return;
        }
        logger.log('Patching Xcode React Native bundle phase');
        project.modifyPhase(bundlePhaseKey, /^.*?\/(packager|scripts)\/react-native-xcode\.sh\s*/m, `${ios_1.bundlePhaseExtraArgs}\n`);
        project.sync();
        return project.patch();
    })
};
exports.addUploadBuildPhase = {
    name: 'Add upload phase',
    run: (wizard) => wizard.fieldValue(common_1.packageJSON).
        then((json) => {
        return ios_1.xcodePatchable(json).then((project) => {
            const uploadBuildPhaseKey = project.findPhase(ios_1.embRunScript);
            if (uploadBuildPhaseKey) {
                logger.warn('Already added upload phase');
                return;
            }
            return wizard.fieldValueList([common_1.iosAppID, common_1.apiToken]).then((list) => {
                const [id, token] = list;
                const proj = project.project;
                proj.addBuildPhase([], 'PBXShellScriptBuildPhase', 'Upload Debug Symbols to Embrace', null, {
                    shellPath: '/bin/sh',
                    shellScript: `EMBRACE_ID=${id} EMBRACE_TOKEN=${token} ${ios_1.embRunScript}`,
                });
                project.sync();
                return project.patch();
            });
        });
    })
};
exports.createEmbracePlist = {
    name: 'Create Embrace plist file',
    run: (wizard) => wizard.fieldValue(common_1.packageJSON).then(({ name }) => {
        const p = path.join('ios', name, 'Embrace-Info.plist');
        if (fs.existsSync(p)) {
            logger.warn('already has Embrace-Info.json file');
            return;
        }
        fs.closeSync(fs.openSync(p, 'a'));
        return ios_1.xcodePatchable({ name }).then((project) => {
            project.addFile(name, `${name}/Embrace-Info.plist`);
            project.sync();
            project.patch();
        }).then(() => ios_1.embracePlistPatchable({ name })).then((file) => {
            file.contents = plistContents();
            return file.patch();
        });
    }),
};
const embraceRNPod = 'pod \'RNEmbrace\', :path => \'../node_modules/react-native-embrace\'';
const plistContents = () => {
    return (`<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>CRASH_REPORT_ENABLED</key>
    <true/>
  </dict>
</plist>`);
};
