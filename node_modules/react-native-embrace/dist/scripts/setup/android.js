"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs');
const path = require('path');
const logger_1 = require("../../src/logger");
const android_1 = require("../util/android");
const file_1 = require("../util/file");
const common_1 = require("./common");
const logger = new logger_1.default(console);
const androidToolsBuildGradleRE = /(\s+)classpath(\(|\s)("|')com\.android\.tools\.build:gradle:.+("|')\)?/;
const androidEmbraceSwazzler = /classpath(\(|\s)('|")embrace-io:embrace-swazzler:.*('|")\)?/;
const embraceAndroidSDKVersion = '4.2.2';
exports.patchBuildGradle = {
    name: 'patch build.gradle',
    run: (wizard) => {
        return android_1.buildGradlePatchable().then((file) => {
            if (file.hasLine(androidToolsBuildGradleRE)) {
                if (file.hasLine(androidEmbraceSwazzler)) {
                    logger.warn('Already has Embrace Swazzler');
                    return;
                }
                logger.log('Patching build.gradle file');
                file.addAfter(androidToolsBuildGradleRE, `classpath(\'embrace-io:embrace-swazzler:${embraceAndroidSDKVersion}\')`);
                file.patch();
                return;
            }
            logger.warn('Can\'t find file with com.android.tools.build:gradle');
            return;
        });
    }
};
const androidPlugin = /apply plugin: ("|')com.android.application("|')/;
const androidEmbraceSwazzlerPluginRE = /apply plugin: ('|")embrace-swazzler('|")/;
const androidEmbraceSwazzlerPlugin = 'apply plugin: \'embrace-swazzler\'';
const extraPackagerArgs = 'extraPackagerArgs: ["--sourcemap-output", "$buildDir/generated/sourcemaps/android-embrace.bundle.map"],';
exports.patchAppBuildGradle = {
    name: 'patch app/build.gradle',
    run: (wizard) => {
        return android_1.buildAppGradlePatchable().then((file) => {
            if (file.hasLine(androidPlugin)) {
                if (file.hasLine(androidEmbraceSwazzlerPluginRE)) {
                    logger.warn('already has Embrace Swazzler plugin');
                }
                else {
                    logger.log('patching app/build.gradle file');
                    file.addAfter(androidPlugin, '\n' + androidEmbraceSwazzlerPlugin);
                }
                if (file.hasLine(extraPackagerArgs)) {
                    logger.warn('already modified extraPackagerArgs');
                }
                else {
                    logger.log('modifying extraPackagerArgs');
                    file.addAfter(/^project.ext.react = \[/m, extraPackagerArgs);
                }
                file.patch();
                return;
            }
            logger.warn('Can\'t find line: apply plugin: "com.android.application"');
            return;
        });
    }
};
exports.createEmbraceJSON = {
    name: 'create Embrace JSON file',
    run: (wizard) => {
        return new Promise((resolve) => {
            const p = path.join('android', 'app', 'src', 'main', 'embrace-config.json');
            if (fs.existsSync(p)) {
                logger.log('already has embrace-config.json file');
                return resolve(file_1.NoopFile);
            }
            fs.closeSync(fs.openSync(p, 'a'));
            return resolve(android_1.embraceJSON());
        }).then((file) => {
            if (file === file_1.NoopFile) {
                return;
            }
            return wizard.fieldValueList([common_1.androidAppID, common_1.apiToken]).then((list) => {
                const [id, token] = list;
                file.contents = android_1.embraceJSONContents({ appID: id, apiToken: token });
                return file.patch();
            });
        });
    }
};
const embraceInit = 'Embrace.getInstance().start(this, false, Embrace.AppFramework.REACT_NATIVE);';
const embraceImport = 'import io.embrace.android.embracesdk.Embrace;';
exports.patchMainApplication = {
    name: 'patch MainApplication.java file',
    run: (wizard) => {
        return wizard.fieldValue(common_1.packageJSON).then((json) => {
            return android_1.mainApplicationPatchable(json).then((file) => {
                if (file.hasLine(embraceImport)) {
                    logger.warn('already has import in MainApplication.java');
                }
                else {
                    logger.warn('adding import line to MainApplication.java');
                    file.addBefore('import android.app.Application;', embraceImport + '\n');
                }
                if (file.hasLine(embraceInit)) {
                    logger.warn('already has init function in MainApplication.java');
                }
                else {
                    logger.warn('adding init function in MainApplication.java');
                    file.addAfter(/(\s+)super\.onCreate\(\);/, embraceInit);
                }
                return file.patch();
            });
        });
    }
};
