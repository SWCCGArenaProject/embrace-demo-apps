"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("../../src/logger");
const file_1 = require("../util/file");
const ios_1 = require("../util/ios");
const packageJson = require('../../../../../package.json');
const embLogger = new logger_1.default(console);
const embraceRNRE = /\[\[Embrace sharedInstance] startWithKey:@"[a-zA-Z0-9]*" launchOptions:launchOptions framework:EMBAppFrameworkReactNative];/;
exports.default = () => {
    embLogger.log('Running iOS postunlink script');
    return file_1.patchFiles(() => ios_1.appDelegatePatchable(packageJson).then((appDelegate) => {
        appDelegate.deleteLine(ios_1.embraceImport);
        appDelegate.deleteLine(embraceRNRE);
        return appDelegate;
    }), () => ios_1.podfilePatchable().then((podfile) => {
        podfile.deleteLine(ios_1.embraceNativePod);
        return podfile;
    }), () => ios_1.xcodePatchable(packageJson).then((project) => {
        const bundlePhaseKey = project.findPhase(ios_1.bundlePhaseRE);
        if (!bundlePhaseKey) {
            embLogger.error('Could not find bundle phase.');
            return file_1.NoopFile;
        }
        project.modifyPhase(bundlePhaseKey, ios_1.bundlePhaseExtraArgs, '');
        project.findAndRemovePhase('/EmbraceIO/run.sh');
        project.sync();
        return project;
    }));
};
